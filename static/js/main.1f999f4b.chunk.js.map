{"version":3,"sources":["assets/atom.png","assets/atom-orange.png","components/InputBox/InputBox.js","components/Score/Score.js","components/Slider/Slider.js","components/Atom/Atom.js","components/Atoms/Atoms.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","InputBox","react_default","a","createElement","className","this","props","label","value","numValue","onChange","handleInputChange","name","Component","Score","answer","Slider","decay","setState","type","min","max","handleSlider","Atom","quality","src","require","Atoms","Array","atoms","fill","components_Atom_Atom","orangeAtoms","App","state","HalfLife","InitAmount","DecayTime","finalAtom","event","_event$target","target","_this","Object","defineProperty","Math","pow","E","toFixed","isNaN","atomCalc","floor","_this2","setInterval","calc","trigger","components_InputBox_InputBox","uom","components_Slider_Slider","components_Atoms_Atoms","components_Score_Score","halfLife","initAmount","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f999f4b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/atom.0107ff33.png\";","module.exports = __webpack_public_path__ + \"static/media/atom-orange.78ed2a84.png\";","import React, { Component } from 'react';\nimport './InputBox.css'\n\nclass InputBox extends Component{\n\n    render(){\n        return(\n            <div className=\"input-row\">\n                <p className=\"label\">{this.props.label}:</p>\n                <input\n                    className=\"measure\"\n                    value={this.props.numValue}\n                    onChange={this.props.handleInputChange}\n                    name={this.props.label}\n                />\n            </div>\n        )\n    }\n}\n\nexport default InputBox;","import React, { Component } from 'react';\nimport \"./Score.css\"\n\nclass Score extends Component{\n\n    render(){\n        return(\n            <div>\n                <p className=\"answer\">{this.props.answer}</p>\n            </div>\n            )\n        }\n}\n\nexport default Score;","import React, { Component } from 'react';\nimport \"./Slider.css\"\n\nclass Slider extends Component{\n\n\n    componentDidMount(){\n        let decay = this.props.decay\n        this.setState({\n            value: decay\n        })\n    }\n\n    render(){\n        return(\n            <div>\n                <input\n                    className=\"slider\"\n                    type=\"range\" \n                    min='0' \n                    max='1000' \n                    value = {this.props.decay}\n                    onChange = {this.props.handleSlider}\n                />\n            </div>)\n    }\n}\n\nexport default Slider;","import React, { Component } from 'react';\nimport \"./Atom.css\"\n\nclass Atom extends Component{\n\n    render(){\n        if(this.props.quality === \"good\"){\n            return(\n                <div>\n                    <img className=\"single-atom\" src={require(\"../../assets/atom.png\")} />\n                </div>\n                )\n            }\n        else{\n            return(\n                <div>\n                    <img className=\"single-atom\" src={require(\"../../assets/atom-orange.png\")} />\n                </div>\n                )\n            }\n        }\n}\n\nexport default Atom;","import React, { Component } from 'react';\nimport Atom from \"../Atom\"\nimport \"./Atoms.css\"\n\nclass Atoms extends Component{\n\n    render(){\n            return(\n                <div className=\"atoms-container\">\n                    <div className=\"atoms-row\">\n                        {Array(this.props.atoms).fill(<Atom quality=\"good\"/>)};\n                        {Array(this.props.orangeAtoms).fill(<Atom />)}\n                    </div>\n                </div>\n                )\n        }\n}\n\nexport default Atoms;","import React, { Component } from 'react';\nimport InputBox from \"./components/InputBox\"\nimport Score from \"./components/Score\"\nimport Slider from \"./components/Slider\"\nimport Atoms from \"./components/Atoms\"\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    HalfLife: 70,\n    InitAmount: 100,\n    DecayTime: 100,\n    answer: 0,\n    atoms: 0,\n    orangeAtoms: 0,\n    finalAtom: 0\n  }\n\n  //function to calculate the remaining Sample, and after it runs atomCalc\n  calc(){\n    var InitAmount = this.state.InitAmount\n    var HalfLife = this.state.HalfLife\n    var DecayTime = this.state.DecayTime\n    var answer = (InitAmount / (Math.pow(Math.E, ((0.693*DecayTime)/HalfLife)))).toFixed(2)\n    if(!isNaN(answer)){\n      this.setState({\n        answer: answer\n      })\n      this.atomCalc()\n    }\n  }\n\n  //Calculates the atoms needed (Empty Atoms, Full Atoms, and the last Partially full atom)\n  atomCalc(){\n    let finalAtom = this.state.answer;\n    let InitAmount = this.state.InitAmount\n    let atoms = Math.floor(finalAtom/5)\n    let orangeAtoms = Math.floor(InitAmount/5) - atoms\n    finalAtom = finalAtom%5\n    this.setState({\n      atoms: atoms,\n      finalAtom: finalAtom,\n      orangeAtoms: orangeAtoms\n    })\n  }\n\n  handleInputChange = event => {\n    const {name, value} = event.target\n    this.setState({\n      [name]: value\n    })\n  }\n\n  handleSlider = event => {\n    const value = event.target.value\n    this.setState({\n      DecayTime: value\n    })\n  }\n\n\n  //Created trigger to fire off calc every second\n  trigger() {\n    setInterval(() => { \n        this.calc()\n    }, 1000);\n  }\n\n  componentDidMount(){\n    this.trigger()\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"backer\">\n          <div className=\"mainbox\">\n              <InputBox handleInputChange={this.handleInputChange} numValue = {this.state.InitAmount} label=\"InitAmount\" uom=\"g\"/>\n              <InputBox handleInputChange={this.handleInputChange} numValue = {this.state.HalfLife} label=\"HalfLife\" uom=\"years\"/>\n            <div className=\"decay-slider-pair\">\n                <InputBox handleInputChange={this.handleInputChange} numValue = {this.state.DecayTime} label=\"DecayTime\" uom=\"years\"/>\n                <Slider className=\"slider-component\" handleSlider = {this.handleSlider} decay={this.state.DecayTime}/>\n            </div>\n              <Atoms atoms={this.state.atoms} finalAtom={this.state.finalAtom} orangeAtoms={this.state.orangeAtoms}/>\n              <Score className=\"answer-component\" answer={this.state.answer} calc={this.calc} halfLife={this.state.HalfLife} initAmount={this.state.InitAmount} decay={this.state.DecayTime}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}