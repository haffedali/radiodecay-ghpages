{"version":3,"sources":["assets/atom.png","assets/atom-orange.png","components/InputBox/InputBox.js","components/Score/Score.js","components/Slider/Slider.js","components/Atom/Atom.js","components/Atoms/Atoms.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","InputBox","state","amount","count","_this","props","numValue","handleKeyDown","event","value","target","setState","react_default","a","createElement","className","this","label","onChange","handleInputChange","name","Component","Score","answer","Slider","handleSlider","decay","type","min","max","Atom","quality","src","require","Atoms","atoms","finalAtom","initAmount","Array","fill","components_Atom_Atom","orangeAtoms","App","HalfLife","InitAmount","DecayTime","_event$target","Object","defineProperty","Math","pow","E","toFixed","isNaN","atomCalc","floor","_this2","setInterval","calc","trigger","components_InputBox_InputBox","components_Slider_Slider","components_Atoms_Atoms","components_Score_Score","halfLife","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uNAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yMC6DzBC,oNAzDXC,MAAQ,CACJC,OAAS,KAEbC,MAAQC,EAAKC,MAAMC,WAYnBC,cAAgB,SAAAC,GACZ,IAAMC,EAAQD,EAAME,OAAOD,MAC3BL,EAAKO,SAAS,CACVT,OAAQO,0HASZ,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAASC,KAAKX,MAAMY,MAAjC,KACAL,EAAAC,EAAAC,cAAA,SACIC,UAAU,UACVN,MAAOO,KAAKX,MAAMC,SAClBY,SAAUF,KAAKX,MAAMc,kBAErBC,KAAMJ,KAAKX,MAAMY,gBApCdI,cCWRC,0LARP,OACIV,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAUC,KAAKX,MAAMkB,gBAL9BF,cCgCLG,oNAtBXC,aAAe,SAAAjB,GACX,IAAIkB,EAAQtB,EAAKH,MAAMQ,MACvBL,EAAKO,SAAS,CACVF,MAAOiB,wFATX,IAAIA,EAAQV,KAAKX,MAAMqB,MACvBV,KAAKL,SAAS,CACVF,MAAOiB,qCAYX,OACId,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SACIC,UAAU,SACVY,KAAK,QACLC,IAAI,IACJC,IAAI,OACJpB,MAASO,KAAKX,MAAMqB,MACpBR,SAAYF,KAAKX,MAAMoB,uBA1BtBJ,cCoBNS,0LAjBP,MAA0B,SAAvBd,KAAKX,MAAM0B,QAENnB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAciB,IAAKC,EAAQ,OAK9CrB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAciB,IAAKC,EAAQ,cAZ3CZ,cC2BJa,oNAxBXjC,MAAQ,CACJkC,MAAO,EACPC,UAAW,EACXC,WAAY,wHAUR,OACIzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVuB,MAAMtB,KAAKX,MAAM8B,OAAOI,KAAK3B,EAAAC,EAAAC,cAAC0B,EAAD,CAAMT,QAAQ,UADhD,IAEKO,MAAMtB,KAAKX,MAAMoC,aAAaF,KAAK3B,EAAAC,EAAAC,cAAC0B,EAAD,gBAnBxCnB,cCmFLqB,oNA/EbzC,MAAQ,CACN0C,SAAU,GACVC,WAAY,IACZC,UAAW,IACXtB,OAAQ,EACRY,MAAO,EACPM,YAAa,EACbL,UAAW,KA6BbjB,kBAAoB,SAAAX,GAAS,IAAAsC,EACLtC,EAAME,OAArBU,EADoB0B,EACpB1B,KAAMX,EADcqC,EACdrC,MACbL,EAAKO,SAALoC,OAAAC,EAAA,EAAAD,CAAA,GACG3B,EAAOX,OAIZgB,aAAe,SAAAjB,GACb,IAAMC,EAAQD,EAAME,OAAOD,MAC3BL,EAAKO,SAAS,CACZkC,UAAWpC,2EAnCb,IAAImC,EAAa5B,KAAKf,MAAM2C,WACxBD,EAAW3B,KAAKf,MAAM0C,SACtBE,EAAY7B,KAAKf,MAAM4C,UACvBtB,GAAUqB,EAAcK,KAAKC,IAAID,KAAKE,EAAK,KAAMN,EAAWF,IAAaS,QAAQ,GACjFC,MAAM9B,KACRP,KAAKL,SAAS,CACZY,OAAQA,IAEVP,KAAKsC,+CAKP,IAAIlB,EAAYpB,KAAKf,MAAMsB,OACvBqB,EAAa5B,KAAKf,MAAM2C,WACxBT,EAAQc,KAAKM,MAAMnB,EAAU,GAC7BK,EAAcQ,KAAKM,MAAMX,EAAW,GAAKT,EAC7CC,GAAsB,EACtBpB,KAAKL,SAAS,CACZwB,MAAOA,EACPC,UAAWA,EACXK,YAAaA,sCAkBP,IAAAe,EAAAxC,KACRyC,YAAY,WACRD,EAAKE,QACN,iDAIH1C,KAAK2C,2CAGL,OACE/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAC8C,EAAD,CAAUzC,kBAAmBH,KAAKG,kBAAmBb,SAAYU,KAAKf,MAAM2C,WAAY3B,MAAM,eAC9FL,EAAAC,EAAAC,cAAC8C,EAAD,CAAUzC,kBAAmBH,KAAKG,kBAAmBb,SAAYU,KAAKf,MAAM0C,SAAU1B,MAAM,aAC9FL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAC8C,EAAD,CAAUzC,kBAAmBH,KAAKG,kBAAmBb,SAAYU,KAAKf,MAAM4C,UAAW5B,MAAM,cAC7FL,EAAAC,EAAAC,cAAC+C,EAAD,CAAQ9C,UAAU,mBAAmBU,aAAgBT,KAAKS,aAAcC,MAAOV,KAAKf,MAAM4C,aAE5FjC,EAAAC,EAAAC,cAACgD,EAAD,CAAO3B,MAAOnB,KAAKf,MAAMkC,MAAOC,UAAWpB,KAAKf,MAAMmC,UAAWK,YAAazB,KAAKf,MAAMwC,cACzF7B,EAAAC,EAAAC,cAACiD,EAAD,CAAOhD,UAAU,mBAAmBQ,OAAQP,KAAKf,MAAMsB,OAAQmC,KAAM1C,KAAK0C,KAAMM,SAAUhD,KAAKf,MAAM0C,SAAUN,WAAYrB,KAAKf,MAAM2C,WAAYlB,MAAOV,KAAKf,MAAM4C,sBAxEhKxB,cCKE4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c89ae530.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/atom.0107ff33.png\";","module.exports = __webpack_public_path__ + \"static/media/atom-orange.78ed2a84.png\";","import React, { Component } from 'react';\nimport './InputBox.css'\n\nclass InputBox extends Component{\n    state = {\n        amount : 0\n    }\n    count = this.props.numValue\n    // handleInputChange = event => {\n    //     const value = event.key\n    //     // console.log(event)\n    //     //use isNAN() for validation, console log is for future reference\n    //     // if (!isNaN(value)){\n    //         // this.setState({\n    //         //     amount: value\n    //         // });\n    //     // }\n    // };\n\n    handleKeyDown = event => {\n        const value = event.target.value\n        this.setState({\n            amount: value\n        })\n        // console.log(event.target)\n    }\n\n    componentDidMount(){\n    }\n\n    render(){\n        return(\n            <div className=\"input-row\">\n                <p className=\"label\">{this.props.label}:</p>\n                <input\n                    className=\"measure\"\n                    value={this.props.numValue}\n                    onChange={this.props.handleInputChange}\n                    // onKeyDown={this.handleKeyDown}\n                    name={this.props.label}\n                />\n                {/* <input\n                    className=\"measure\"\n                    value={this.state.amount}\n                    onChange={this.handleInputChange}\n                    onKeyDown={this.handleKeyDown}\n                    name=\"Half-Life\"\n                />\n                <input\n                    className=\"measure\"\n                    value={this.state.amount}\n                    onChange={this.handleInputChange}\n                    onKeyDown={this.handleKeyDown}\n                    name=\"Decay Time\"\n                />   */}\n                \n            </div>\n        )\n    }\n}\n\nexport default InputBox;","import React, { Component } from 'react';\nimport \"./Score.css\"\n\nclass Score extends Component{\n\n    render(){\n        return(\n            <div>\n                <p className=\"answer\">{this.props.answer}</p>\n            </div>\n            )\n        }\n}\n\nexport default Score;","import React, { Component } from 'react';\nimport \"./Slider.css\"\n\nclass Slider extends Component{\n\n\n    componentDidMount(){\n        let decay = this.props.decay\n        this.setState({\n            value: decay\n        })\n    }\n\n    handleSlider = event => {\n        let decay = this.state.value\n        this.setState({\n            value: decay\n        })\n    }\n\n    render(){\n        return(\n            <div>\n                <input\n                    className=\"slider\"\n                    type=\"range\" \n                    min='0' \n                    max='1000' \n                    value = {this.props.decay}\n                    onChange = {this.props.handleSlider}\n                />\n            </div>)\n    }\n}\n\nexport default Slider;","import React, { Component } from 'react';\nimport \"./Atom.css\"\n\nclass Atom extends Component{\n\n    render(){\n        if(this.props.quality === \"good\"){\n            return(\n                <div>\n                    <img className=\"single-atom\" src={require(\"../../assets/atom.png\")} />\n                </div>\n                )\n        }else{\n            return(\n                <div>\n                    <img className=\"single-atom\" src={require(\"../../assets/atom-orange.png\")} />\n                </div>\n                )\n        }\n\n        }\n}\n\nexport default Atom;","import React, { Component } from 'react';\nimport Atom from \"../Atom\"\nimport \"./Atoms.css\"\n\nclass Atoms extends Component{\n\n    state = {\n        atoms: 0,\n        finalAtom: 0,\n        initAmount: 0\n    }\n\n\n    componentDidMount(){\n\n    }\n\n    render(){\n            // let oranges = Math.floor(this.props.initAmount / 5)\n            return(\n                <div className=\"atoms-container\">\n                    <div className=\"atoms-row\">\n                        {Array(this.props.atoms).fill(<Atom quality=\"good\"/>)};\n                        {Array(this.props.orangeAtoms).fill(<Atom />)}\n                    </div>\n                </div>\n                )\n        }\n}\n\nexport default Atoms;","import React, { Component } from 'react';\nimport InputBox from \"./components/InputBox\"\nimport Score from \"./components/Score\"\nimport Slider from \"./components/Slider\"\nimport Atoms from \"./components/Atoms\"\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    HalfLife: 70,\n    InitAmount: 100,\n    DecayTime: 100,\n    answer: 0,\n    atoms: 0,\n    orangeAtoms: 0,\n    finalAtom: 0\n  }\n\n  calc(){\n    var InitAmount = this.state.InitAmount\n    var HalfLife = this.state.HalfLife\n    var DecayTime = this.state.DecayTime\n    var answer = (InitAmount / (Math.pow(Math.E, ((0.693*DecayTime)/HalfLife)))).toFixed(2)\n    if(!isNaN(answer)){\n      this.setState({\n        answer: answer\n      })\n      this.atomCalc()\n    }\n  }\n\n  atomCalc(){\n    let finalAtom = this.state.answer;\n    let InitAmount = this.state.InitAmount\n    let atoms = Math.floor(finalAtom/5)\n    let orangeAtoms = Math.floor(InitAmount/5) - atoms\n    finalAtom = finalAtom%5\n    this.setState({\n      atoms: atoms,\n      finalAtom: finalAtom,\n      orangeAtoms: orangeAtoms\n    })\n  }\n\n  handleInputChange = event => {\n    const {name, value} = event.target\n    this.setState({\n      [name]: value\n    })\n  }\n\n  handleSlider = event => {\n    const value = event.target.value\n    this.setState({\n      DecayTime: value\n    })\n  }\n\n  trigger() {\n    setInterval(() => { \n        this.calc()\n    }, 1000);\n  }\n\n  componentDidMount(){\n    this.trigger()\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"backer\">\n          <div className=\"mainbox\">\n              <InputBox handleInputChange={this.handleInputChange} numValue = {this.state.InitAmount} label=\"InitAmount\"/>\n              <InputBox handleInputChange={this.handleInputChange} numValue = {this.state.HalfLife} label=\"HalfLife\"/>\n            <div className=\"decay-slider-pair\">\n                <InputBox handleInputChange={this.handleInputChange} numValue = {this.state.DecayTime} label=\"DecayTime\"/>\n                <Slider className=\"slider-component\" handleSlider = {this.handleSlider} decay={this.state.DecayTime}/>\n            </div>\n              <Atoms atoms={this.state.atoms} finalAtom={this.state.finalAtom} orangeAtoms={this.state.orangeAtoms}/>\n              <Score className=\"answer-component\" answer={this.state.answer} calc={this.calc} halfLife={this.state.HalfLife} initAmount={this.state.InitAmount} decay={this.state.DecayTime}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}